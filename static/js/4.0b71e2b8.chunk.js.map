{"version":3,"sources":["service/api.js","components/HomePage/HomePage.module.css","components/HomePage/HomePage.jsx"],"names":["movie_id","a","config","url","axios","data","Error","cast","results","query","params","length","toast","warn","defaults","baseURL","api_key","language","api","fetchPopularMovies","fetchMovieInfo","fetchMoviesCast","fetchMovieReviews","fetchMoviesByQuery","module","exports","HomePage","useState","popularMovies","setPopularMovies","location","useLocation","useEffect","then","response","className","s","title","list","map","poster_path","id","list_item","to","pathname","state","from","src","alt","poster","subtitle"],"mappings":"2OAwBA,WAA8BA,GAA9B,mBAAAC,EAAA,sEAEUC,EAAS,CAAEC,IAAI,SAAD,OAAWH,IAFnC,SAG2BI,IAAMF,EAAQF,GAHzC,uBAGYK,EAHZ,EAGYA,KAHZ,kBAIWA,GAJX,gCAMI,IAAIC,MAAM,2BANd,0D,kEAUA,WAA+BN,GAA/B,mBAAAC,EAAA,sEAEUC,EAAS,CAAEC,IAAI,SAAD,OAAWH,EAAX,aAFxB,SAG2BI,IAAMF,EAAQF,GAHzC,uBAGYK,EAHZ,EAGYA,KAHZ,kBAIWA,EAAKE,MAJhB,gCAMI,IAAID,MAAM,2BANd,0D,kEAUA,WAAiCN,GAAjC,mBAAAC,EAAA,sEAEUC,EAAS,CAAEC,IAAI,SAAD,OAAWH,EAAX,aAFxB,SAG2BI,IAAMF,EAAQF,GAHzC,uBAGYK,EAHZ,EAGYA,KAHZ,kBAIWA,EAAKG,SAJhB,gCAMI,IAAIF,MAAM,2BANd,0D,kEAUA,WAAkCG,GAAlC,mBAAAR,EAAA,sEAEUC,EAAS,CAAEC,IAAI,eAAiBO,OAAQ,CAAED,UAFpD,SAG2BL,IAAMF,GAHjC,mBAIgC,KADpBG,EAHZ,EAGYA,MACCG,QAAQG,OAJrB,uBAKMC,IAAMC,KAAK,0CALjB,mDAQWR,EAAKG,SARhB,kCAUI,IAAIF,MAAM,2BAVd,2D,sBAhDAF,IAAMU,SAASC,QAHE,gCAIjBX,IAAMU,SAASJ,OAAS,CACtBM,QAJc,mCAKdC,SAAU,SA2DZ,IAAMC,EAAM,CACVC,mBAzDsB,uCAAG,gCAAAlB,EAAA,sEAEjBC,EAAS,CACbC,IAAI,uBAHiB,SAKAC,IAAMF,GALN,uBAKfG,EALe,EAKfA,KALe,kBAMhBA,EAAKG,SANW,gCAQvB,IAAIF,MAAM,2BARa,yDAAH,qDA0DtBc,e,4CACAC,gB,4CACAC,kB,4CACAC,mB,6CAGaL,O,mBC3EfM,EAAOC,QAAU,CAAC,MAAQ,wBAAwB,KAAO,uBAAuB,UAAY,4BAA4B,OAAS,yBAAyB,SAAW,6B,gJC+CtJC,EA1CE,WAAO,IAAD,EACqBC,mBAAS,IAD9B,mBACdC,EADc,KACCC,EADD,KAGfC,EAAWC,cASjB,OAPAC,qBAAU,WAENd,IAAIC,qBAAqBc,MAAK,SAAAC,GAAQ,OAAIL,EAAiBK,QAI5D,IAED,qCACE,oBAAIC,UAAWC,IAAEC,MAAjB,2BACA,oBAAIF,UAAWC,IAAEE,KAAjB,SACGV,EAAcW,KAAI,gBAAGC,EAAH,EAAGA,YAAaH,EAAhB,EAAgBA,MAAOI,EAAvB,EAAuBA,GAAvB,OACjB,oBAAaN,UAAWC,IAAEM,UAA1B,SACE,eAAC,IAAD,CACEC,GAAI,CACFC,SAAS,WAAD,OAAaH,GACrBI,MAAO,CAAEC,KAAMhB,EAASc,WAH5B,UAME,qBACEG,IAAG,UAvBE,mCAuBF,OAAkBP,GACrBQ,IAAI,eACJb,UAAWC,IAAEa,SAEf,oBAAId,UAAWC,IAAEc,SAAjB,SAA4Bb,QAZvBI","file":"static/js/4.0b71e2b8.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = 'f2c48f8e3f2e8ceb9b5f5ca977db990f';\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n  language: 'en-US',\r\n};\r\n\r\nconst fetchPopularMovies = async () => {\r\n  try {\r\n    const config = {\r\n      url: `trending/movie/week`,\r\n    };\r\n    const { data } = await axios(config);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n};\r\n\r\nasync function fetchMovieInfo(movie_id) {\r\n  try {\r\n    const config = { url: `movie/${movie_id}` };\r\n    const { data } = await axios(config, movie_id);\r\n    return data;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMoviesCast(movie_id) {\r\n  try {\r\n    const config = { url: `movie/${movie_id}/credits` };\r\n    const { data } = await axios(config, movie_id);\r\n    return data.cast;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMovieReviews(movie_id) {\r\n  try {\r\n    const config = { url: `movie/${movie_id}/reviews` };\r\n    const { data } = await axios(config, movie_id);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMoviesByQuery(query) {\r\n  try {\r\n    const config = { url: `search/movie`, params: { query } };\r\n    const { data } = await axios(config);\r\n    if (data.results.length === 0) {\r\n      toast.warn('No results were found for your search.');\r\n      return;\r\n    }\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nconst api = {\r\n  fetchPopularMovies,\r\n  fetchMovieInfo,\r\n  fetchMoviesCast,\r\n  fetchMovieReviews,\r\n  fetchMoviesByQuery,\r\n};\r\n\r\nexport default api;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HomePage_title__1hrQY\",\"list\":\"HomePage_list__2PJ80\",\"list_item\":\"HomePage_list_item__29NQc\",\"poster\":\"HomePage_poster__3y-r5\",\"subtitle\":\"HomePage_subtitle__2OvFU\"};","import { useState, useEffect } from 'react';\r\nimport { Link, useLocation } from 'react-router-dom';\r\nimport api from '../../service/api';\r\nimport s from './HomePage.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst HomePage = () => {\r\n  const [popularMovies, setPopularMovies] = useState([]);\r\n  const srcBaseUrl = 'https://image.tmdb.org/t/p/w500';\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    const renderPopularMovies = () => {\r\n      api.fetchPopularMovies().then(response => setPopularMovies(response));\r\n    };\r\n\r\n    renderPopularMovies();\r\n  }, []);\r\n  return (\r\n    <>\r\n      <h1 className={s.title}>Popular today</h1>\r\n      <ul className={s.list}>\r\n        {popularMovies.map(({ poster_path, title, id }) => (\r\n          <li key={id} className={s.list_item}>\r\n            <Link\r\n              to={{\r\n                pathname: `/movies/${id}`,\r\n                state: { from: location.pathname },\r\n              }}\r\n            >\r\n              <img\r\n                src={`${srcBaseUrl}${poster_path}`}\r\n                alt=\"Movie poster\"\r\n                className={s.poster}\r\n              />\r\n              <h3 className={s.subtitle}>{title}</h3>\r\n            </Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nHomePage.propTypes = {\r\n  popularMovies: PropTypes.array,\r\n};\r\n\r\nexport default HomePage;\r\n"],"sourceRoot":""}
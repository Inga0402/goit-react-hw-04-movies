{"version":3,"sources":["service/api.js","components/MoviePage/MoviePage.module.css","components/MoviePage/default.jpg","components/MoviePage/MoviePage.jsx"],"names":["movie_id","a","config","url","axios","data","Error","cast","results","query","params","length","toast","warn","defaults","baseURL","api_key","language","api","fetchPopularMovies","fetchMovieInfo","fetchMoviesCast","fetchMovieReviews","fetchMoviesByQuery","module","exports","MoviePage","useState","movies","setMovies","setQuery","useRouteMatch","request","setRequest","location","useLocation","history","useHistory","searchString","search","split","useEffect","renderMoviesByQuery","then","onSubmit","event","preventDefault","push","pathname","error","className","s","form","type","autoComplete","placeholder","value","onChange","currentTarget","toLowerCase","input","btn","list","map","title","id","poster_path","list_item","to","state","from","link","src","alt","poster","defaultImage"],"mappings":"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","file":"static/js/6.1416f145.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst BASE_URL = 'https://api.themoviedb.org/3/';\r\nconst API_KEY = 'f2c48f8e3f2e8ceb9b5f5ca977db990f';\r\n\r\naxios.defaults.baseURL = BASE_URL;\r\naxios.defaults.params = {\r\n  api_key: API_KEY,\r\n  language: 'en-US',\r\n};\r\n\r\nconst fetchPopularMovies = async () => {\r\n  try {\r\n    const config = {\r\n      url: `trending/movie/week`,\r\n    };\r\n    const { data } = await axios(config);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n};\r\n\r\nasync function fetchMovieInfo(movie_id) {\r\n  try {\r\n    const config = { url: `movie/${movie_id}` };\r\n    const { data } = await axios(config, movie_id);\r\n    return data;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMoviesCast(movie_id) {\r\n  try {\r\n    const config = { url: `movie/${movie_id}/credits` };\r\n    const { data } = await axios(config, movie_id);\r\n    return data.cast;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMovieReviews(movie_id) {\r\n  try {\r\n    const config = { url: `movie/${movie_id}/reviews` };\r\n    const { data } = await axios(config, movie_id);\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nasync function fetchMoviesByQuery(query) {\r\n  try {\r\n    const config = { url: `search/movie`, params: { query } };\r\n    const { data } = await axios(config);\r\n    if (data.results.length === 0) {\r\n      toast.warn('No results were found for your search.');\r\n      return;\r\n    }\r\n    return data.results;\r\n  } catch (error) {\r\n    new Error('No response from server');\r\n  }\r\n}\r\n\r\nconst api = {\r\n  fetchPopularMovies,\r\n  fetchMovieInfo,\r\n  fetchMoviesCast,\r\n  fetchMovieReviews,\r\n  fetchMoviesByQuery,\r\n};\r\n\r\nexport default api;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"MoviePage_form__dPS7Z\",\"input\":\"MoviePage_input__l5U1y\",\"btn\":\"MoviePage_btn__l1QoS\",\"list\":\"MoviePage_list__2Z1fL\",\"list_item\":\"MoviePage_list_item__pFMLa\",\"poster\":\"MoviePage_poster__1UavF\",\"link\":\"MoviePage_link__1ByRc\"};","export default __webpack_public_path__ + \"static/media/default.2e01288c.jpg\";","import { useState, useEffect } from 'react';\r\nimport {\r\n  NavLink,\r\n  useRouteMatch,\r\n  useLocation,\r\n  useHistory,\r\n} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { toast } from 'react-toastify';\r\nimport defaultImage from './default.jpg';\r\nimport api from '../../service/api';\r\nimport s from './MoviePage.module.css';\r\n\r\nconst MoviePage = () => {\r\n  const [movies, setMovies] = useState(null);\r\n  const [query, setQuery] = useState('');\r\n  const { url } = useRouteMatch();\r\n  const [request, setRequest] = useState('');\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const srcBaseUrl = 'https://image.tmdb.org/t/p/w500';\r\n\r\n  const resetInput = () => {\r\n    setQuery('');\r\n  };\r\n  const handleChangeRequest = event => {\r\n    setQuery(event.currentTarget.value.toLowerCase());\r\n  };\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (query !== '') {\r\n      setRequest(query);\r\n      history.push({\r\n        pathname: location.pathname,\r\n        search: `query=${query}`,\r\n      });\r\n      resetInput();\r\n    } else if (query === '') {\r\n      toast.error('Please enter your query.');\r\n      return;\r\n    }\r\n  };\r\n  const searchString = location.search.split('=')[1];\r\n\r\n  useEffect(() => {\r\n    const renderMoviesByQuery = () => {\r\n      api.fetchMoviesByQuery(request || searchString).then(setMovies);\r\n    };\r\n\r\n    if (request) {\r\n      renderMoviesByQuery();\r\n      return;\r\n    }\r\n\r\n    if (location.search !== '') {\r\n      renderMoviesByQuery();\r\n    }\r\n  }, [request, location.search, searchString]);\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <input\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          placeholder=\"Search movies\"\r\n          value={query}\r\n          onChange={handleChangeRequest}\r\n          className={s.input}\r\n        />\r\n        <button type=\"submit\" className={s.btn}>\r\n          Search\r\n        </button>\r\n      </form>\r\n      {movies && (\r\n        <>\r\n          <ul className={s.list}>\r\n            {movies.map(({ title, id, poster_path }) => (\r\n              <li key={id} className={s.list_item}>\r\n                <NavLink\r\n                  to={{\r\n                    pathname: `${url}/${id}`,\r\n                    state: { from: `${url}${location.search}` },\r\n                  }}\r\n                  className={s.link}\r\n                >\r\n                  {poster_path ? (\r\n                    <img\r\n                      src={`${srcBaseUrl}${poster_path}`}\r\n                      alt=\"Movie poster\"\r\n                      className={s.poster}\r\n                    />\r\n                  ) : (\r\n                    <img\r\n                      src={defaultImage}\r\n                      alt=\"Was not found\"\r\n                      className={s.poster}\r\n                    />\r\n                  )}\r\n                  {title}\r\n                </NavLink>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nMoviePage.propTypes = {\r\n  movies: PropTypes.array,\r\n  query: PropTypes.string,\r\n  request: PropTypes.string,\r\n};\r\n\r\nexport default MoviePage;\r\n"],"sourceRoot":""}